summarise(killed = sum(num_killed)) %>%
View()
# Calculate the city that is most impacted by the shootings
# Impact here means the city that lost the most lives
most_impacted_city <- shootings_df %>%
group_by(city) %>%
summarise(killed = sum(num_killed)) %>%
arrange(-killed) %>%
View()
i
# Calculate the city that is most impacted by the shootings
# Impact here means the city that lost the most lives
most_impacted_city <- shootings_df %>%
group_by(city) %>%
summarise(killed = sum(num_killed)) %>%
arrange(-killed) %>%
filter(killed = max(killed, na.rm = TRUE)) %>%
View()
# Calculate the city that is most impacted by the shootings
# Impact here means the city that lost the most lives
most_impacted_city <- shootings_df %>%
group_by(city) %>%
summarise(killed = sum(num_killed)) %>%
arrange(-killed) %>%
filter(killed == max(killed, na.rm = TRUE)) %>%
View()
# Calculate the city that is most impacted by the shootings
# Impact here means the city that lost the most lives
most_impacted_city <- shootings_df %>%
group_by(city) %>%
summarise(killed = sum(num_killed)) %>%
arrange(-killed) %>%
filter(killed == max(killed, na.rm = TRUE)) %>%
pull(city)
View(shootings_df)
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date)) %>%
View()
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date)) %>%
View()
library(tidyr)
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date)) %>%
View()
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
View()
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
View()
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
group_by(day) %>%
View()
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
group_by(day) %>%
summarise(killed = sum(num_killed, na.rm = TRUE), injured = sum(num_injured, na.rm = TRUE)) %>%
View()
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
group_by(day) %>%
summarise(killed = sum(num_killed, na.rm = TRUE), injured = sum(num_injured, na.rm = TRUE)) %>%
arrange(-killed) %>%
View()
# Calculate the state that is most impacted by the shootings
# Impact here means the state that lost the most lives
most_impacted_state <- shootings_df %>%
group_by(state) %>%
summarise(killed = sum(num_killed)) %>%
arrange(-killed) %>%
filter(killed == max(killed, na.rm = TRUE)) %>%
pull(state)
most_killed_day <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
group_by(day) %>%
summarise(killed = sum(num_killed, na.rm = TRUE),
injured = sum(num_injured, na.rm = TRUE)) %>%
arrange(-killed) %>%
pull(day)
# Calculate the day that has the highest number of killed people
most_killed_day <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
group_by(day) %>%
summarise(killed = sum(num_killed, na.rm = TRUE),
injured = sum(num_injured, na.rm = TRUE)) %>%
filter(killed == max(killed, na.rm = TRUE)) %>%
pull(day)
View(summary)
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
group_by(day) %>%
summarise(killed = sum(num_killed, na.rm = TRUE),
injured = sum(num_injured, na.rm = TRUE)) %>%
arrange(-killed)
View(summary)
View(summary)
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(day = weekdays(date_format)) %>%
group_by(day) %>%
summarise(killed = sum(num_killed, na.rm = TRUE),
injured = sum(num_injured, na.rm = TRUE)) %>%
arrange(-killed)
table <- View(summary)
knitr::opts_chunk$set(echo = TRUE)
source('analysis.R')
print(shooting_count)
print(lives_lost)
print(most_impacted_city)
print(most_impacted_state)
print(most_killed_day)
View(summary)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
source('analysis.R')
print(shooting_count)
print(lives_lost)
print(most_impacted_city)
print(most_impacted_state)
print(most_killed_day)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
source('analysis.R')
print(shooting_count)
print(lives_lost)
print(most_impacted_city)
print(most_impacted_state)
print(most_killed_day)
plot(pressure)
source('analysis.R')
```{r echo=FALSE}
```{r sourcing, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source('analysis.R')
print(shooting_count)
print(lives_lost)
print(most_impacted_city)
print(most_impacted_state)
print(most_killed_day)
plot(pressure)
table <- View(summary)
# Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(Day = weekdays(date_format)) %>%
group_by(Day) %>%
summarise(Killed = sum(num_killed, na.rm = TRUE),
Injured = sum(num_injured, na.rm = TRUE)) %>%
arrange(-Killed)
Create a summary table
summary <- shootings_df %>%
mutate(date_format = as.Date(date, "%B %d, %Y")) %>%
mutate(Day_Of_The_Week = weekdays(date_format)) %>%
group_by(Day_Of_The_Week) %>%
summarise(People_Killed = sum(num_killed, na.rm = TRUE),
Peopl_Injured = sum(num_injured, na.rm = TRUE)) %>%
arrange(-People_Killed)
# Cleveland Shootings
cleveland_date <- shootings_df %>%
pull(date) %>%
head(1)
install.packages("leaflet")
library(ggplot2)
ggplot(shootings_df, aes(shootings_df$num_injured)) + geom_histogram()
ggplot(shootings_df, aes(shootings_df$num_killed)) + geom_histogram()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
shiny::runApp('~/INFO201/Test_Application')
setwd("~/INFO201/GroupProject/make-it-rain")
# Store data sources into data frame
sal_by_col_df <- read.csv("./data/salaries-by-college-type.csv", stringsAsFactors = FALSE)
# Store data sources into data frame
sal_by_col_df <- read.csv("./data/salaries-by-college-type.csv", stringsAsFactors = FALSE)
View(sal_by_col_df)
sal_by_reg_df <- read.csv("./data/salaries-by-region.csv", stringsAsFactors = FALSE)
View(sal_by_col_df)
View(sal_by_reg_df)
# Data frame of the starting salary by degree
sal_by_deg_df <- read.csv("./data/degrees-that-pay-back.csv", stringsAsFactors = FALSE)
View(sal_by_deg_df)
# Import packages
library(dplyr)
df %>%
filter(col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
get_starting_salary <- function(col_name, col_value, df) {
t <- df %>%
filter(col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
get_starting_salary <- function(col_name, col_value, df) {
t <- df %>%
filter(col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
2 <- sal_by_deg_df %>%
filter(Undergraduate.Major == Accounting) %>%
pull(Starting.Median.Salary) %>%
head(1)
t2 <- sal_by_deg_df %>%
filter(Undergraduate.Major == Accounting) %>%
pull(Starting.Median.Salary) %>%
head(1)
t2 <- sal_by_deg_df %>%
filter(Undergraduate.Major == "Accounting") %>%
pull(Starting.Median.Salary) %>%
head(1)
test <- get_starting_salary(Undergraduate.Major, "Accounting", sal_by_deg_df)
t2 <- sal_by_deg_df %>%
filter("Undergraduate.Major" == "Accounting") %>%
pull(Starting.Median.Salary) %>%
head(1)
test <- get_starting_salary(!!Undergraduate.Major, "Accounting", sal_by_deg_df)
test <- get_starting_salary(!!sym(Undergraduate.Major), "Accounting", sal_by_deg_df)
test <- get_starting_salary(as.symbol(Undergraduate.Major), "Accounting", sal_by_deg_df)
test <- get_starting_salary(!!as.symbol(Undergraduate.Major), "Accounting", sal_by_deg_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(rlang::sym(col_name) == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
test <- get_starting_salary(Undergraduate.Major, "Accounting", sal_by_deg_df)
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(as.name(col_name) == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(as.name(col_name) == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(as.name(col_name) == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
Undergraduate.Major
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
t2 <- sal_by_deg_df %>%
filter(rlang::sym(Undergraduate.Major) == "Accounting") %>%
pull(Starting.Median.Salary) %>%
head(1)
t2 <- sal_by_deg_df %>%
filter(Undergraduate.Major == "Accounting") %>%
pull(Starting.Median.Salary) %>%
head(1)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(!! col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
test <- get_starting_salary("Undergraduate.Major", "Accounting", sal_by_deg_df)
test <- get_starting_salary(quo(Undergraduate.Major), "Accounting", sal_by_deg_df)
test <- get_starting_salary(quo(Undergraduate.Major), "Accounting", sal_by_deg_df)
test2 <- get_starting_salary(quo(School.Name), "Cooper Union", sal_by_col_df)
runApp('GroupProject')
setwd("~/INFO201/GroupProject/make-it-rain/GroupProject")
setwd("~/INFO201/GroupProject/make-it-rain")
runApp('GroupProject1')
setwd("~/INFO201/GroupProject/make-it-rain/GroupProject1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/INFO201/GroupProject/make-it-rain")
setwd("~/INFO201/GroupProject/make-it-rain")
setwd("~/INFO201/GroupProject/make-it-rain")
ada
pwd()
setwd("~/INFO201/GroupProject/make-it-rain")
setwd("~/INFO201/GroupProject/make-it-rain")
setwd("~/INFO201/GroupProject/make-it-rain")
list(sal_by_col_df[, 1]
college_names <- sal_by_col_df %>%
pull(School.Name)
college_names <- sal_by_col_df %>%
pull(School.Name)
# This file is used to calculate values and function that will be use in the application
# Import packages
library(dplyr)
# Store data sources into data frame
# Data frame of the starting salary by college
sal_by_col_df <- read.csv("./data/salaries-by-college-type.csv", stringsAsFactors = FALSE)
# Data frame of the starting salary by state
sal_by_reg_df <- read.csv("./data/salaries-by-region.csv", stringsAsFactors = FALSE)
# Data frame of the starting salary by degree
sal_by_deg_df <- read.csv("./data/degrees-that-pay-back.csv", stringsAsFactors = FALSE)
college_names <- sal_by_col_df %>%
pull(School.Name)
# Returns the starting median salary based on the given variable from a give data set
# Parameters :
# 1. col_name  : the column name where the col_value exists
# 2. col_value : the column value of which we want to get the starting median salary
# 3. df        : the data frame of to get the starting salary value from
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(!! col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
runApp('GroupProject1')
runApp('GroupProject1')
runApp('GroupProject1')
input$colleges
get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
print(get_starting_salary("School.Name", "Amherst College", sal_by_col_df))
get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
print(get_starting_salary("School.Name", "Amherst College", sal_by_col_df))
test <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
# This file is used to calculate values and function that will be use in the application
# Import packages
library(dplyr)
# Store data sources into data frame
# Data frame of the starting salary by college
sal_by_col_df <- read.csv("./data/salaries-by-college-type.csv", stringsAsFactors = FALSE)
# Data frame of the starting salary by state
sal_by_reg_df <- read.csv("./data/salaries-by-region.csv", stringsAsFactors = FALSE)
# Data frame of the starting salary by degree
sal_by_deg_df <- read.csv("./data/degrees-that-pay-back.csv", stringsAsFactors = FALSE)
college_names <- sal_by_col_df %>%
arrange(School.Name) %>%
pull(School.Name)
degrees_list <- sal_by_deg_df %>%
arrange(Undergraduate.Major) %>%
pull(Undergraduate.Major)
# Returns the starting median salary based on the given variable from a give data set
# Parameters :
# 1. col_name  : the column name where the col_value exists
# 2. col_value : the column value of which we want to get the starting median salary
# 3. df        : the data frame of to get the starting salary value from
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(!! col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
# This file is used to calculate values and function that will be use in the application
# Import packages
library(dplyr)
# Store data sources into data frame
# Data frame of the starting salary by college
sal_by_col_df <- read.csv("./data/salaries-by-college-type.csv", stringsAsFactors = FALSE)
# Data frame of the starting salary by state
sal_by_reg_df <- read.csv("./data/salaries-by-region.csv", stringsAsFactors = FALSE)
# Data frame of the starting salary by degree
sal_by_deg_df <- read.csv("./data/degrees-that-pay-back.csv", stringsAsFactors = FALSE)
college_names <- sal_by_col_df %>%
arrange(School.Name) %>%
pull(School.Name)
degrees_list <- sal_by_deg_df %>%
arrange(Undergraduate.Major) %>%
pull(Undergraduate.Major)
# Returns the starting median salary based on the given variable from a give data set
# Parameters :
# 1. col_name  : the column name where the col_value exists
# 2. col_value : the column value of which we want to get the starting median salary
# 3. df        : the data frame of to get the starting salary value from
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(!! col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(School.Name, "Amherst College", sal_by_col_df)
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter( col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(as.sym(School.Name), "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(as.name(School.Name), "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(as.name("School.Name"), "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(as.name("School.Name"), "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(as.symbol("School.Name"), "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(as.symbol("School.Name", "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(enquo("School.Name"), "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(enquo("School.Name"), "Amherst College", sal_by_col_df)
te2st <- get_starting_salary(quo_name(enquo("School.Name")), "Amherst College", sal_by_col_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
te2st <- get_starting_salary(quo_name(enquo("School.Name")), "Amherst College", sal_by_col_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(rlang::sym(col_name) == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(rlang::sym(col_name) == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
te2st <- get_starting_salary("School.Name", "Amherst College", sal_by_col_df)
t <- df %>%
filter("School.Name" == "Amherst College") %>%
pull(Starting.Median.Salary) %>%
head(1)
t <- sal_by_col_df %>%
filter("School.Name" == "Amherst College") %>%
pull(Starting.Median.Salary) %>%
head(1)
t <- sal_by_col_df %>%
filter(School.Name == "Amherst College") %>%
pull(Starting.Median.Salary) %>%
head(1)
get_starting_salary <- function(col_name, col_value, df) {
df %>%
filter(!!col_name == col_value) %>%
pull(Starting.Median.Salary) %>%
head(1)
}
te2st <- get_starting_salary(sym("School.Name"), "Amherst College", sal_by_col_df)
runApp('GroupProject1')
install.packages("usmap")
install.packages("usmap")
install.packages("usmap")
install.packages("usmap")
get_bar_graph(2,3)
View(get_bar_graph(2,3
))
install.packages("usmap")
